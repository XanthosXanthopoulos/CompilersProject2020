/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ALogOpComparison extends PComparison
{
    private PComparison _first_;
    private POperationLogical _operationLogical_;
    private PComparison _second_;

    public ALogOpComparison()
    {
    }

    public ALogOpComparison(
        PComparison _first_,
        POperationLogical _operationLogical_,
        PComparison _second_)
    {
        setFirst(_first_);

        setOperationLogical(_operationLogical_);

        setSecond(_second_);

    }
    public Object clone()
    {
        return new ALogOpComparison(
            (PComparison) cloneNode(_first_),
            (POperationLogical) cloneNode(_operationLogical_),
            (PComparison) cloneNode(_second_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogOpComparison(this);
    }

    public PComparison getFirst()
    {
        return _first_;
    }

    public void setFirst(PComparison node)
    {
        if(_first_ != null)
        {
            _first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _first_ = node;
    }

    public POperationLogical getOperationLogical()
    {
        return _operationLogical_;
    }

    public void setOperationLogical(POperationLogical node)
    {
        if(_operationLogical_ != null)
        {
            _operationLogical_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operationLogical_ = node;
    }

    public PComparison getSecond()
    {
        return _second_;
    }

    public void setSecond(PComparison node)
    {
        if(_second_ != null)
        {
            _second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _second_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_first_)
            + toString(_operationLogical_)
            + toString(_second_);
    }

    void removeChild(Node child)
    {
        if(_first_ == child)
        {
            _first_ = null;
            return;
        }

        if(_operationLogical_ == child)
        {
            _operationLogical_ = null;
            return;
        }

        if(_second_ == child)
        {
            _second_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_first_ == oldChild)
        {
            setFirst((PComparison) newChild);
            return;
        }

        if(_operationLogical_ == oldChild)
        {
            setOperationLogical((POperationLogical) newChild);
            return;
        }

        if(_second_ == oldChild)
        {
            setSecond((PComparison) newChild);
            return;
        }

    }
}
