/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getAction().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAction) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunctionAction(AFunctionAction node)
    {
        defaultIn(node);
    }

    public void outAFunctionAction(AFunctionAction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionAction(AFunctionAction node)
    {
        inAFunctionAction(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionAction(node);
    }

    public void inAStatementAction(AStatementAction node)
    {
        defaultIn(node);
    }

    public void outAStatementAction(AStatementAction node)
    {
        defaultOut(node);
    }

    public void caseAStatementAction(AStatementAction node)
    {
        inAStatementAction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementAction(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        {
            Object temp[] = node.getValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperationAssign() != null)
        {
            node.getOperationAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        inAArrayAssignStatement(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayAssignStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAAssertStatement(node);
    }

    public void inAFunctionStatement(AFunctionStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionStatement(AFunctionStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionStatement(AFunctionStatement node)
    {
        inAFunctionStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionStatement(node);
    }

    public void inAAssignOperationAssign(AAssignOperationAssign node)
    {
        defaultIn(node);
    }

    public void outAAssignOperationAssign(AAssignOperationAssign node)
    {
        defaultOut(node);
    }

    public void caseAAssignOperationAssign(AAssignOperationAssign node)
    {
        inAAssignOperationAssign(node);
        outAAssignOperationAssign(node);
    }

    public void inAMinusAssignOperationAssign(AMinusAssignOperationAssign node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignOperationAssign(AMinusAssignOperationAssign node)
    {
        defaultOut(node);
    }

    public void caseAMinusAssignOperationAssign(AMinusAssignOperationAssign node)
    {
        inAMinusAssignOperationAssign(node);
        outAMinusAssignOperationAssign(node);
    }

    public void inADivAssignOperationAssign(ADivAssignOperationAssign node)
    {
        defaultIn(node);
    }

    public void outADivAssignOperationAssign(ADivAssignOperationAssign node)
    {
        defaultOut(node);
    }

    public void caseADivAssignOperationAssign(ADivAssignOperationAssign node)
    {
        inADivAssignOperationAssign(node);
        outADivAssignOperationAssign(node);
    }

    public void inAIdExpression(AIdExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExpression(AIdExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdExpression(AIdExpression node)
    {
        inAIdExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExpression(node);
    }

    public void inAArrayAccessExpression(AArrayAccessExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayAccessExpression(AArrayAccessExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayAccessExpression(AArrayAccessExpression node)
    {
        inAArrayAccessExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayAccessExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAFuncCallExpression(AFuncCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpression(AFuncCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        inAFuncCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallExpression(node);
    }

    public void inAOpenExpression(AOpenExpression node)
    {
        defaultIn(node);
    }

    public void outAOpenExpression(AOpenExpression node)
    {
        defaultOut(node);
    }

    public void caseAOpenExpression(AOpenExpression node)
    {
        inAOpenExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAOpenExpression(node);
    }

    public void inATypeExpression(ATypeExpression node)
    {
        defaultIn(node);
    }

    public void outATypeExpression(ATypeExpression node)
    {
        defaultOut(node);
    }

    public void caseATypeExpression(ATypeExpression node)
    {
        inATypeExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        {
            Object temp[] = node.getValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAMinExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        {
            Object temp[] = node.getValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAMaxExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAArrayExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outADivExpression(node);
    }

    public void inAModExpression(AModExpression node)
    {
        defaultIn(node);
    }

    public void outAModExpression(AModExpression node)
    {
        defaultOut(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        inAModExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAModExpression(node);
    }

    public void inAPowExpression(APowExpression node)
    {
        defaultIn(node);
    }

    public void outAPowExpression(APowExpression node)
    {
        defaultOut(node);
    }

    public void caseAPowExpression(APowExpression node)
    {
        inAPowExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAPowExpression(node);
    }

    public void inALogOpComparison(ALogOpComparison node)
    {
        defaultIn(node);
    }

    public void outALogOpComparison(ALogOpComparison node)
    {
        defaultOut(node);
    }

    public void caseALogOpComparison(ALogOpComparison node)
    {
        inALogOpComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getOperationLogical() != null)
        {
            node.getOperationLogical().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outALogOpComparison(node);
    }

    public void inANotComparison(ANotComparison node)
    {
        defaultIn(node);
    }

    public void outANotComparison(ANotComparison node)
    {
        defaultOut(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        inANotComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotComparison(node);
    }

    public void inACompareComparison(ACompareComparison node)
    {
        defaultIn(node);
    }

    public void outACompareComparison(ACompareComparison node)
    {
        defaultOut(node);
    }

    public void caseACompareComparison(ACompareComparison node)
    {
        inACompareComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getComparisonSymbol() != null)
        {
            node.getComparisonSymbol().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outACompareComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        outAFalseComparison(node);
    }

    public void inAAndOperationLogical(AAndOperationLogical node)
    {
        defaultIn(node);
    }

    public void outAAndOperationLogical(AAndOperationLogical node)
    {
        defaultOut(node);
    }

    public void caseAAndOperationLogical(AAndOperationLogical node)
    {
        inAAndOperationLogical(node);
        outAAndOperationLogical(node);
    }

    public void inAOrOperationLogical(AOrOperationLogical node)
    {
        defaultIn(node);
    }

    public void outAOrOperationLogical(AOrOperationLogical node)
    {
        defaultOut(node);
    }

    public void caseAOrOperationLogical(AOrOperationLogical node)
    {
        inAOrOperationLogical(node);
        outAOrOperationLogical(node);
    }

    public void inAGrtComparisonSymbol(AGrtComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outAGrtComparisonSymbol(AGrtComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseAGrtComparisonSymbol(AGrtComparisonSymbol node)
    {
        inAGrtComparisonSymbol(node);
        outAGrtComparisonSymbol(node);
    }

    public void inALessComparisonSymbol(ALessComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outALessComparisonSymbol(ALessComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseALessComparisonSymbol(ALessComparisonSymbol node)
    {
        inALessComparisonSymbol(node);
        outALessComparisonSymbol(node);
    }

    public void inAGrtEqComparisonSymbol(AGrtEqComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outAGrtEqComparisonSymbol(AGrtEqComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseAGrtEqComparisonSymbol(AGrtEqComparisonSymbol node)
    {
        inAGrtEqComparisonSymbol(node);
        outAGrtEqComparisonSymbol(node);
    }

    public void inALessEqComparisonSymbol(ALessEqComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outALessEqComparisonSymbol(ALessEqComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseALessEqComparisonSymbol(ALessEqComparisonSymbol node)
    {
        inALessEqComparisonSymbol(node);
        outALessEqComparisonSymbol(node);
    }

    public void inANEqComparisonSymbol(ANEqComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outANEqComparisonSymbol(ANEqComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseANEqComparisonSymbol(ANEqComparisonSymbol node)
    {
        inANEqComparisonSymbol(node);
        outANEqComparisonSymbol(node);
    }

    public void inAEqComparisonSymbol(AEqComparisonSymbol node)
    {
        defaultIn(node);
    }

    public void outAEqComparisonSymbol(AEqComparisonSymbol node)
    {
        defaultOut(node);
    }

    public void caseAEqComparisonSymbol(AEqComparisonSymbol node)
    {
        inAEqComparisonSymbol(node);
        outAEqComparisonSymbol(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAFunctionValue(AFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAFunctionValue(AFunctionValue node)
    {
        defaultOut(node);
    }

    public void caseAFunctionValue(AFunctionValue node)
    {
        inAFunctionValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctionValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }
}
